import numpy as np
import matplotlib.pyplot as plt

# Define the piecewise function
def piecewise_function(U, R_intercept, U_optimal, R_slope1, R_slope2):
    if U <= U_optimal:
        return R_intercept + (U / U_optimal) * R_slope1
    else:
        return R_intercept + R_slope1 + ((U - U_optimal) / (1 - U_optimal)) * R_slope2

# Parameters for the first piecewise function (Borrow_Interest)
R_intercept1 = 0
U_optimal1 = 0.80
R_slope1_1 = 0.04
R_slope2_1 = 0.75

# Parameters for the second piecewise function (Supply_Interest)
R_intercept2 = 0
U_optimal2 = 0.80
R_slope1_2 = 0.04 * 0.80  # Apply a 20% discount to R_slope1 for the second function
R_slope2_2 = 0.75 * 0.80  # Apply a 20% discount to R_slope2 for the second function

# Generate a range of U values
U = np.linspace(0, 1, 400)  # Adjust the range and number of points as needed

# Calculate the corresponding R values for both functions
R1 = [piecewise_function(u, R_intercept1, U_optimal1, R_slope1_1, R_slope2_1) for u in U]
R2 = [piecewise_function(u, R_intercept2, U_optimal2, R_slope1_2, R_slope2_2) for u in U]

# Create the plot
plt.figure(figsize=(8, 6))
plt.plot(U, R1, color='red', label="Borrow_Interest", linewidth=2)
plt.plot(U, R2, color='lime', label="Supply_Interest", linewidth=2)

# Add dotted lines to mark U_optimal1 and U_optimal2 and their respective interest rates
plt.axvline(U_optimal1, color='orange', linestyle='--', label=f"U_optimal: 80%", linewidth=2.2)
plt.text(0.8, 0.7, f' U_optimal = 80%', ha='center', va='top', backgroundcolor='black', color='white', fontsize=10)

plt.axhline(piecewise_function(0.9, R_intercept1, U_optimal1, R_slope1_1, R_slope2_1), color='deepskyblue', linestyle='--', label=f"Borrow Interest Rate: {piecewise_function(0.9, R_intercept1, U_optimal1, R_slope1_1, R_slope2_1):.2f}")
plt.axhline(piecewise_function(0.9, R_intercept2, U_optimal2, R_slope1_2, R_slope2_2), color='orchid', linestyle='--', label=f"Supply Interest Rate: {piecewise_function(0.9, R_intercept2, U_optimal2, R_slope1_2, R_slope2_2):.2f}")

# ... (Previous code remains unchanged) ...

# Add dotted lines to mark the y-values at x = 0.9
x_value = 0.9
R1_at_x_value = piecewise_function(x_value, R_intercept1, U_optimal1, R_slope1_1, R_slope2_1)
R2_at_x_value = piecewise_function(x_value, R_intercept2, U_optimal2, R_slope1_2, R_slope2_2)

plt.plot([x_value, x_value], [0, R1_at_x_value], color='yellow', linestyle='--', linewidth=2.2)
plt.plot([x_value, x_value], [0, R2_at_x_value], color='yellow', linestyle='--', linewidth=2.2)

# Annotate the y-values for x = 0.9
plt.text(0.65, R1_at_x_value, f' Borrow Rate = {R1_at_x_value:.2f}', ha='right', va='top', backgroundcolor='black', color='white', fontsize=10)
plt.text(0.65, R2_at_x_value, f' Supply Rate = {R2_at_x_value:.2f}', ha='right', va='top', backgroundcolor='black', color='white', fontsize=10)

# ... (Rest of the code remains unchanged) ...

# Annotate the vertical gap at U ≈ 0.9
U_gap = 0.9
R1_gap = piecewise_function(U_gap, R_intercept1, U_optimal1, R_slope1_1, R_slope2_1)
R2_gap = piecewise_function(U_gap, R_intercept2, U_optimal2, R_slope1_2, R_slope2_2)
plt.annotate(f'Spread ≈ {abs(R1_gap - R2_gap):.2f}', xy=(0.95, (R1_gap + R2_gap) / 2), color='white', fontsize=10.5, ha='center')

# Customize the plot
plt.axhline(0, color='white', linewidth=0.5)
plt.axvline(0, color='white', linewidth=0.5)
plt.grid(True, color='white', linestyle='--', alpha=0.6)
plt.title("Interest Rates")
plt.xlabel("Utilization")
plt.ylabel("Rates")
plt.legend()

# Set the background color to black
ax = plt.gca()
ax.set_facecolor('black')

# Show the plot
plt.show()